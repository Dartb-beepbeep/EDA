순차 다이어그램 
object : 학생, 교수, 클라이언트, 서버


(사용자 관리)
[액터 : 교수]
- 교수가 클라이언트에 학생 등록을 요청한다. (Request Entry Stud |input : StudN)
- 클라이언트는 서버에 학생을 등록한다. (Entry Stud)
- 서버는 클라이언트에 등록확인을 보낸다. (Success Entry)
- 클라이언트는 교수에게 등록확인을 보낸다 (Success Entry)

(사용자 조회)
[액터 : 학생, 교수]
- 교수 or 학생은 클라이언트에게 학생을 검색/열람 요청을 한다. (Request View Stud)
- 클라이언트는 서버에게 학생 검색/열람 요청을 한다.(Get Stud_list)
- 서버는 학생 목록 데이터를 전달한다.(Stud_list[Stud_1, Stud_2, ..., Stud_N])  <---
- 클라이언트는 학생 데이터를 교수 or 학생에게 보여준다 (View Stud.list)
- 교수 or 학생은 클라이언트에게 특정 학생을 선택한다. (Click index.N in Stud.list)
- 클라이언트는 서버에게 특정 학생 데이터를 요청한다(Get Stud_list[N].data)
- 서버는 특정 학생 데이터를 클라이언트에게 전달한다(Stud_N.data) <---
- 클라이언트는 특정 학생 데이터를 보여준다. (View Stud_N.data)


(그룹 관리)
[액터 : 교수]
- 교수가 클라이언트에 그룹 등록을 요청한다. (Request Entry Group |input : Group.member = [Stud1, Stud2, ... , StudN)
- 클라이언트는 서버에 특정 학생을 그룹에 등록한다. (Entry group)
- 서버는 클라이언트에 등록확인을 보낸다. (Success Entry)
- 클라이언트는 교수에게 등록확인을 보낸다 (Success Entry)

(그룹 조회)
[액터 : 학생, 교수]
- 교수 or 학생은 클라이언트에게 그룹에서 학생을 검색/열람 요청을 한다. (Request View Group)
- 클라이언트는 서버에게 그룹 검색/열람 요청을 한다.(Get Group_list)
- 서버는 그룹 목록을 전달한다.(Group_list[Stud_1, Stud_2, ..., Stud_N])  <---
- 클라이언트는 그룹 목록을 교수 or 학생에게 보여준다 (View Group.list)
- 교수 or 학생은 클라이언트에게 특정 그룹을 선택한다. (Click index.N in Group.list)
- 클라이언트는 서버에게 특정 그룹 정보를 요청한다(Get Group.list[N].data)
- 서버는 특정 그룹 정보를 클라이언트에게 전달한다(Group_N.data) <---
- 클라이언트는 특정 그룹 정보를 보여준다. (View Group_N.data)

(그룹 공지 관리)
[액터 : 교수]
- 교수는 클라이언트에게 그룹페이지에 접속을 요청한다.(Connect Group Page)
- 클라이언트는 교수에게 접속확인을 전송(Success Connect)
- 교수는 클라이언트에게 공지글 작성을 요청(Write Notice |input : context)
- 클라이언트는 서버에게 공지글을 등록(Post a Notice)
- 서버는 클라이언트에게 등록 완료 메세지 전송.(Success Post)
- 클라이언트는 등록 완료 메세지 전송(Success Post)

(그룹 공지 조회)
[액터 : 학생, 교수]
- 학생 or 교수는 클라이언트에게 공지 목록 중 하나를 선택한다.(Click Group.post_N )
- 클라이언트는 서버에게 공지글을 열람 요청(Get Group.post_N)
- 서버는 클라이언트에게 공지글 전달(Group.post_N.context) <---
- 클라이언트는 공지글을 학생 or 교수에게 보여준다(View Group.post_N.context)

(그룹 토론 관리)
[액터 : 학생, 교수]
- 학생 or 교수는 클라이언트에게 댓글/토론글 작성한다(Write comment/debate | input : context)
- 클라이언트는 댓글/토론글을 서버에 저장한다(Save comment/dabate)
- 서버는 클라이언트에게 저장 확인 메세지 전달(Success Save)
- 클라이언트는 학생 or 교수에게 본인이 작성한 글을 보여준다. (View comment/debate)

(메시지 관리)
[액터 : 학생, 교수]
[+ object 추가 : receiver] 
- 학생 or 교수는 클라이언트에게 메세지 전송 요청을 한다(Request send message)
- 클라이언트는 학생 or 교수에게 메세지 수신자와 내용을 입력요청( | input : (receiver, text))
- 클라이언트는 메세지를 서버에 전달한다. (Send Message)
- 서버는 수신자에게 메세지를 전달한다.(Send Meassage)
- 수신자는 메세지 수신 확인(Success Receive)
- 서버는 클라이언트에게 메세지 수신 확인(Success Receive)
- 클라이언트는 학생 or 교수에게 메세지 최종 수신 확인 메세지 전송한다(Success Receive)





Q1.  학생 or 교수 두개의 액터로 나눔으로써 복잡해진다?
>> A1. 사용자(User)로 통합하고 각각의 액터의 역할로 조건문을 이용하면 될듯..?

Q2. 각각의 유스케이스별로 각각의 시퀀스 다이어그램을 나눴는데 딱 봐도 복잡해 보인다...?
>> A1. 각 유스케이스 별로 더 간소화 시켜 축약해야 할지..? 
>> A2. 아니면 통합된 유스케이스를 만들어서 시퀀스 다이어그램을 만들어야할지..?

Q3. 사용자/그룹 등록에서 수정/삭제 기능은 등록과정과 비슷할 것이라고 생각하고
시퀀스 다이어그램에서 제외하였는데 추가하여 완벽한 시퀀스 다이어그램을 그려야할지...?
>> A1. 의논

Q4. 사용자 페이지, 그룹 페이지, 그룹 공지 페이지, 그룹 토론 페이지, ... 등 여러 페이지들이 많았는데
시퀀스 다이어그램에세 중요도가 떨어진다고 생각하여 페이지 접속 과정을 생략하였는데 이래도 될지..?
>> A1. 의논 






